{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/brandontsang/projects/slate/src/components/dashboard/ContentManagerSubjectContent.tsx\",\n    _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useContext, useEffect, useRef } from 'react';\nimport ContentManagerArticle from './ContentManagerArticle';\nimport ContentManagerFolder from './ContentManagerFolder';\nimport { ContentManagerContext } from '../../contexts/contentManager';\nimport useReorder from '../../hooks/reorder';\nvar elementPositions = [];\nexport default function ContentManagerSubjectContent(_ref) {\n  _s();\n\n  var _this = this;\n\n  var content = _ref.content,\n      isOpen = _ref.isOpen;\n\n  var _useContext = useContext(ContentManagerContext),\n      loadedContent = _useContext.loadedContent,\n      loadContent = _useContext.loadContent;\n\n  var childrenRef = useRef(null);\n\n  function updateYPositions() {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if ((!childrenRef.current || isReordering) && !force) return;\n    elementPositions = [];\n\n    var _iterator = _createForOfIteratorHelper(childrenRef.current.childNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var boundingBox = child.getBoundingClientRect();\n        elementPositions.push(boundingBox.bottom);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    elementPositions.pop();\n    elementPositions.sort();\n\n    if (elementPositions.length === 0) {\n      elementPositions = [-100];\n    }\n  }\n\n  useEffect(updateYPositions, []);\n\n  var _useReorder = useReorder(elementPositions),\n      isReordering = _useReorder.isReordering,\n      startReorder = _useReorder.startReorder;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: childrenRef,\n      children: content.map(function (uuid) {\n        var content = loadedContent.find(function (c) {\n          return c.uuid === uuid;\n        });\n\n        if (typeof content === 'undefined') {\n          if (isOpen) loadContent(uuid);\n          return null;\n        } else if (content.type === 'folder') {\n          return /*#__PURE__*/_jsxDEV(ContentManagerFolder, {\n            folder: content,\n            isReordering: isReordering,\n            startReorder: startReorder,\n            updateYPositions: updateYPositions\n          }, uuid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, _this);\n        } else if (content.type === 'article') {\n          return /*#__PURE__*/_jsxDEV(ContentManagerArticle, {\n            article: content,\n            isReordering: isReordering,\n            startReorder: startReorder,\n            updateYPositions: updateYPositions\n          }, uuid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, _this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(ContentManagerSubjectContent, \"THz/TuZCzYAPFH5S92+QnhfiQYM=\", false, function () {\n  return [useReorder];\n});\n\n_c = ContentManagerSubjectContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentManagerSubjectContent\");","map":{"version":3,"sources":["/Users/brandontsang/projects/slate/src/components/dashboard/ContentManagerSubjectContent.tsx"],"names":["React","useContext","useEffect","useRef","ContentManagerArticle","ContentManagerFolder","ContentManagerContext","useReorder","elementPositions","ContentManagerSubjectContent","content","isOpen","loadedContent","loadContent","childrenRef","updateYPositions","force","current","isReordering","childNodes","child","boundingBox","getBoundingClientRect","push","bottom","pop","sort","length","startReorder","map","uuid","find","c","type"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useRef} from 'react';\n\nimport ContentManagerArticle from './ContentManagerArticle';\nimport ContentManagerFolder from './ContentManagerFolder';\nimport {ContentManagerContext} from '../../contexts/contentManager';\nimport useReorder from '../../hooks/reorder';\n\nlet elementPositions = [] as number[];\n\nexport default function ContentManagerSubjectContent({\n    content,\n    isOpen\n}: {\n    content: string[];\n    isOpen: boolean;\n}) {\n    const {loadedContent, loadContent} = useContext(ContentManagerContext);\n    const childrenRef = useRef(null);\n\n    function updateYPositions(force = false) {\n        if ((!childrenRef.current || isReordering) && !force) return;\n\n        elementPositions = [];\n        for (let child of childrenRef.current.childNodes) {\n            let boundingBox = child.getBoundingClientRect();\n            elementPositions.push(boundingBox.bottom);\n        }\n        elementPositions.pop();\n        elementPositions.sort();\n\n        if (elementPositions.length === 0) {\n            elementPositions = [-100];\n        }\n    }\n    useEffect(updateYPositions, []);\n\n    const {isReordering, startReorder} = useReorder(elementPositions);\n\n    return (\n        <>\n            <div ref={childrenRef}>\n                {content.map((uuid) => {\n                    let content = loadedContent.find((c) => c.uuid === uuid);\n                    if (typeof content === 'undefined') {\n                        if (isOpen) loadContent(uuid);\n                        return null;\n                    } else if (content.type === 'folder') {\n                        return (\n                            <ContentManagerFolder\n                                key={uuid}\n                                folder={content}\n                                isReordering={isReordering}\n                                startReorder={startReorder}\n                                updateYPositions={updateYPositions}\n                            />\n                        );\n                    } else if (content.type === 'article') {\n                        return (\n                            <ContentManagerArticle\n                                key={uuid}\n                                article={content}\n                                isReordering={isReordering}\n                                startReorder={startReorder}\n                                updateYPositions={updateYPositions}\n                            />\n                        );\n                    }\n                })}\n            </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}