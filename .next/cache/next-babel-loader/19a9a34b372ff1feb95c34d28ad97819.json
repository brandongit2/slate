{"ast":null,"code":"export let Actions;\n\n(function (Actions) {\n  Actions[Actions[\"ADD\"] = 0] = \"ADD\";\n  Actions[Actions[\"REMOVE\"] = 1] = \"REMOVE\";\n  Actions[Actions[\"MODIFY\"] = 2] = \"MODIFY\";\n  Actions[Actions[\"MOVE_UP\"] = 3] = \"MOVE_UP\";\n  Actions[Actions[\"MOVE_DOWN\"] = 4] = \"MOVE_DOWN\";\n})(Actions || (Actions = {}));","map":{"version":3,"sources":["/Users/brandontsang/projects/slate/src/defs/contentManager.ts"],"names":["Actions"],"mappings":"AAEA,WAAYA,OAAZ;;WAAYA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O","sourcesContent":["import {Content} from './content';\n\nexport enum Actions {\n    ADD,\n    REMOVE,\n    MODIFY,\n    MOVE_UP,\n    MOVE_DOWN\n}\n\nexport interface ActionAdd<T extends Content> {\n    uuid: string;\n    type: Actions.ADD;\n    object: T;\n    to: string;\n    after: string;\n}\n\nexport interface ActionRemove<T extends Content> {\n    uuid: string;\n    type: Actions.REMOVE;\n    object: T;\n    from: string;\n}\n\nexport interface ActionModify<T extends Content> {\n    uuid: string;\n    type: Actions.MODIFY;\n    from: T;\n    to: T;\n}\n\nexport interface ActionMoveUp<T extends Content> {\n    uuid: string;\n    type: Actions.MOVE_UP;\n    object: T;\n}\n\nexport interface ActionMoveDown<T extends Content> {\n    uuid: string;\n    type: Actions.MOVE_DOWN;\n    object: T;\n}\n\nexport type Action<T extends Content> =\n    | ActionAdd<T>\n    | ActionRemove<T>\n    | ActionModify<T>\n    | ActionMoveUp<T>\n    | ActionMoveDown<T>;\n"]},"metadata":{},"sourceType":"module"}